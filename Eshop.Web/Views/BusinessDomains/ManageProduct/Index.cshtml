@model Eshop.Web.Helper.PaginatedList<Eshop.Models.BusinessDomains.Product>

@*@model IPagedList<Eshop.Models.BusinessDomains.Product>

@using X.PagedList.Mvc.Core;
@using X.PagedList;*@


@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_adminLayout.cshtml";
}

<!-- Content Header (Page header) -->
<section class="content-header">
    <div class="header-icon">
        <i class="fa fa-file-text"></i>
    </div>
    <div class="header-title">
        <h1>Products</h1>
        <small>List of products</small>
    </div>
</section>
<!-- Main content -->
<section class="content">
    <div class="row">
        <div class="col-lg-12 pinpin">
            <div class="card lobicard" data-sortable="true">
                <div class="card-header">
                    <div class="card-title custom_title">
                        <h4>Products</h4>
                    </div>
                </div>
                <div class="card-body">
                    <div class="btn-group d-flex" role="group">
                        <div class="buttonexport" id="buttonlist">
                            <a class="btn btn-add" asp-action="Create">
                                <i class="fa fa-plus"></i> Add New
                            </a>
                        </div>
                    </div>
                    @using (Html.BeginForm("Index", "ManageProduct", FormMethod.Get))
                    {
                        <div class="row">
                            <div class="col-2">
                                @Html.DropDownList("Cat_Id", (SelectList)ViewBag.Cat_Id, "ALL", new { @style = "width:150px;", @onchange = "this.form.submit()", @id="cat_id" })
                            </div>
                            <div class="col-10" style="text-align:right">
                                <p style="color:black;">
                                    <strong><em>Sort with Category or search by Product/Category name:</em></strong>
                                    @Html.TextBox("SearchString", ViewBag.CurrentFilter as string, null, new { @placeholder = "Search" })
                                    <input type="submit" value="Sort" style="width:90px;" />
                                </p>

                            </div>

                        </div>
                    }

                    <div class="table-responsive">
                        <table id="dataTableExample1" class="table table-bordered table-striped table-hover">
                            <thead class="back_table_color">
                                <tr class="info">
                                    <th>
                                        @Html.DisplayNameFor(model => model.First().Name)
                                    </th>
                                    <th>
                                        @Html.DisplayNameFor(model => model.First().Description)
                                    </th>
                                    <th>
                                        @Html.DisplayNameFor(model => model.First().CurrentStock)
                                    </th>
                                    <th>
                                        @Html.DisplayNameFor(model => model.First().Price)
                                    </th>
                                    <th>
                                        @Html.DisplayNameFor(model => model.First().Category.CategoryName)
                                    </th>
                                    <th>
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in Model)
                                {
                                    <tr>
                                        <td>
                                            @Html.DisplayFor(modelItem => item.Name)
                                        </td>
                                        <td>
                                            @Html.DisplayFor(modelItem => item.Description)
                                        </td>
                                        <td>
                                            @Html.DisplayFor(modelItem => item.CurrentStock)
                                        </td>
                                        <td>
                                            @Html.DisplayFor(modelItem => item.Price)
                                        </td>
                                        <td>
                                            @Html.DisplayFor(modelItem => item.Category.CategoryName)
                                        </td>
                                        <td>
                                            <div class="flex-button">
                                                <a asp-action="Edit" asp-route-id="@item.AutoId" class="btn btn-add btn-sm"><i class="fa fa-pencil"></i></a>
                                                <a asp-action="Details" asp-route-id="@item.AutoId" class="btn btn-primary"><span class="fa fa-file-image-o"></span></a>
                                                <a asp-action="Delete" asp-route-id="@item.AutoId" class="btn btn-danger btn-sm"><i class="fa fa-trash-o"></i></a>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
    @*<div class="container">
    Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount
    @Html.PagedListPager(Model, page => Url.Action("Index", new { page, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter  }))
    </div>*@

    <div class="container">

        @*Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount
        @Html.PagedListPager(Model, page => Url.Action("Index", new { page, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter  }))*@

        @{
            var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
            var nextDisabled = !Model.HasNextPage ? "disabled" : "";
            var LastDisabled = !Model.IsLastPage ? "disabled" : "";
        }

        <br />
        Page &nbsp; @Model.PageIndex &nbsp; of &nbsp; @Model.TotalPages &nbsp;
        <br />
        <a href="@Url.Action("Index",new { page=1 })" class="btn btn-dark @prevDisabled"> <span class="fa fa-angle-double-left"></span> </a>
        <a href="@Url.Action("Index",new { page=Model.PageIndex-1 })" class="btn btn-dark @prevDisabled"> <span class="fa fa-arrow-left"></span> </a>
        <a href="@Url.Action("Index",new { page=Model.PageIndex+1 })" class="btn btn-dark @nextDisabled"> <span class="fa fa-arrow-right"></span> </a>
        <a href="@Url.Action("Index",new { page=Model.TotalPages })" class="btn btn-dark @LastDisabled"> <span class="fa fa-angle-double-right"></span> </a>

        @* <a asp-action="Index"
        asp-route-sortOrder = "@ViewData["CurrentSort"]"
        asp-route-pageNumber = "@(Model.PageIndex - 1)"
        asp-route-currentFilter = "@ViewData["CurrentFilter"]"
        class="btn btn-default @prevDisabled">
        Previous
        </a>
        <a asp-action="Index"
        asp-route-sortOrder="@ViewData["CurrentSort"]"
        asp-route-pageNumber="@(Model.PageIndex + 1)"
        asp-route-currentFilter="@ViewData["CurrentFilter"]"
        class="btn btn-default @nextDisabled">
        Next
        </a>*@

    </div>
</section>

@section Scripts {
    <script type="text/javascript">

        $("#cat_id").change(function () {
            this.form.submit();
        });

    </script>

}